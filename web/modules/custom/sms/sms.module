<?php

/**
 * @file
 * Provides sms system management tool..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function sms_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.sms':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= t('<p>School Management System</p>');
      return $output;
  }
}

/**
* Implements hook_toolbar().
*/
function sms_toolbar() {
  $items = [];
  $items['sms_menu'] = [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => 'SMS',
      '#url' =>  Url::fromRoute('sms.settings'),
      '#options' => [
        'attributes' => array(
          'class' => array(
            'toolbar-icon',
            'toolbar-icon-devel',
            'trigger',
            'toolbar-item',
          ),
        ),
      ],
    ],
    '#weight' => 999,
  ];
  return $items;
}

/**
* Implements hook_form_alter().
*/
function sms_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //dump(\Drupal::service('sms.service')->getCurrentUser());
  
  $student_information_new = ['node_student_information_form'];
  if (in_array($form_id, $student_information_new)) {
    $form['#validate'][] = 'unique_title_validate_handler';
    //array_unshift($form['actions']['submit']['#submit'], 'studentInformation_submit_handler'); 
    $form['actions']['submit']['#submit'][] = 'studentInformation_submit_handler'; 
  }

  $student_information_edit = ['node_student_information_edit_form'];
  if (in_array($form_id, $student_information_edit)) {
    $form['title']['#disabled'] = 'disabled';
    //$form['actions']['submit']['#submit'][] = 'studentInformation_submit_handler'; 
  }

  if (in_array($form_id, ['node_fee_mangement_form','node_fee_mangement_edit_form'])) {

    $form['field_student_reg_id']['widget'][0]['target_id']['#field_suffix'] = '<span id="student_info"></span>';
    $form['title']['#disabled'] = 'disabled';
    //$form['field_student_reg_id']['widget']['#disabled'] = TRUE;
    $form['field_class']['widget']['#disabled'] = TRUE;
    $form['field_batch_session']['widget']['#disabled'] = TRUE;
    //$form['field_class_fee']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
    $form['field_class_fee']['widget']['#disabled'] = TRUE;
    $form['field_fee_deposit']['widget']['#disabled'] = TRUE;
    $form['field_fee_due']['widget']['#disabled'] = TRUE;
    
    if ($form_id == 'node_fee_mangement_form') {
      $form['field_fee_commitment']['widget'][0]['value']['#default_value'] = 0;
      $form['field_student_reg_id']['widget'][0]['target_id']['#ajax'] = [
        'callback' => 'getStudentInfo',
        'event' => 'change',
        'wrapper' => 'student_info',
      ];
      $form['field_class']['widget']['#ajax'] = [
        'callback' => '_getClassFeeAmount',
        'event' => 'change',
        'wrapper' => 'edit-field-class-fee-0-value',
      ];
    }

    if ($form_id == 'node_fee_mangement_edit_form') {
      $form['field_fee_commitment']['widget']['#disabled'] = TRUE;
    }

  } 

}

/**
* Callback unique_title_validate_handler.
*/
function unique_title_validate_handler($form, FormStateInterface $form_state) {
  $title = $form_state->getValue('title')[0]['value'];
  $title_exits = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'student_information','title' => $title]);
  if ($title_exits) {
    $form_state->setErrorByName('title', t('Registration ID Already Exist.'));
  }
}

/**
* Callback student_information_submit_handler.
*/
function studentInformation_submit_handler($form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $system_student_nid = $values['nid'];
  $class = $values['field_class'][0]['target_id'];
  $reg_id = $values['title'][0]['value'];
  $batch_session = $values['field_batch_session'][0]['target_id'];
  // Class fee value.
  $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($class);
  $classFee = $term->field_class_fee->value;
  // Create fee statement new entity.
  $node = \Drupal::entityTypeManager()->getStorage('node')->create([
    'type' => 'fee_mangement',
    'title' => 'RegID:'.$reg_id.'&Class:'.$class.'&Session:'.$batch_session.'&Sid:'.$system_student_nid,
    'langcode' => 'en',
    'uid' => \Drupal::currentUser()->id(),
    'status' => 1,
    'field_student_reg_id' => $system_student_nid,
    'field_class' => $class,
    'field_batch_session' => $batch_session,
    'field_class_fee' => $classFee,
    'field_fee_commitment' => 0,
  ]);
  $node->save();

}

/**
* Callback get class amount change on class.
*/
function _getClassFeeAmount(array &$form, FormStateInterface $form_state, $form_id) {
  $response = new AjaxResponse();
  if (!empty($form_state->getValue('field_class')[0]['target_id'])) {
    $course_id = $form_state->getValue('field_class')[0]['target_id'];
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($course_id);
    $classFee = $term->field_class_fee->value;
    $response->addCommand(new InvokeCommand('#edit-field-class-fee-0-value', 'val', [$classFee]));
  }
  else {
    $response->addCommand(new InvokeCommand('#edit-field-class-fee-0-value', 'val', ['']));
  }
  return $response;
}

/**
* Callback get student info change on student reg id.
*/
function getStudentInfo(array &$form, FormStateInterface $form_state, $form_id) {
  $response = new AjaxResponse();
  if (!empty($form_state->getValue('field_student_reg_id')[0]['target_id'])) {
    $student_id = $form_state->getValue('field_student_reg_id')[0]['target_id'];
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($student_id);
    $url = $node->toUrl()->toString();
    $link = '<a href="'.$url.'" class="use-ajax button button--small" data-dialog-type="modal">View Student Info</a>';
    $response->addCommand(new InvokeCommand('#student_info', 'html', [$link]));
  }
  else {
    $response->addCommand(new InvokeCommand('#student_info', 'html', ['']));
  }
  return $response;
}